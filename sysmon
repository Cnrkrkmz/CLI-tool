#!/usr/bin/env python3
#import argparse
import os
import psutil 
import time
import ctypes
import platform
import GPUtil
from colorama import Fore, Style, init

init(autoreset=True)

#parser = argparse.ArgumentParser(description='System monitoring tool')

#parser.add_argument('--cpu', action='store_true', help='Shows CPU usage')
#parser.add_argument('--ram', action='store_true', help='Shows RAM usage')
#parser.add_argument('--disk', action='store_true', help='Shows disk usage')
#parser.add_argument('--uptime', action='store_true', help='Shows returns system boot time')
#parser.add_argument('--avgl', action='store_true', help='Shows average system load')
#parser.add_argument('--mcpu',action='store_true', help='Shows most used cpu process (must be used as sudo)')
#parser.add_argument('--gpu', action='store_true', help='Shows activity and degree of gpu')

#args = parser.parse_args()

def get_system_uptime():

    system=platform.system()
    if(system == "Linux"):
        t = os.popen('uptime -p').read()[:-1]
        print(f"System uptime: {t}")

    
    elif(system == "Windows"):
        lib = ctypes.windll.kernel32
        t = lib.GetTickCount64()
        t = int(str(t)[:-3])
        mins, sec = divmod(t, 60)
        hour, mins = divmod(mins, 60)
        days, hour = divmod(hour, 24)
        print(f"{days} days, {hour:02}:{mins:02}:{sec:02}")

    elif(system == "Darwin"):
        t = os.popen('uptime').read()
        uptime_part = t.split(" up ")[1].split(",")
        up_time = uptime_part[0].strip()

        #print(f"System uptime: {up_time}")

        if(":" in up_time):
            hour_part = up_time.split(":")[0]
            min_part = up_time.split(":")[1]
            print(f"{hour_part} hours, {min_part} minutes")
            
        elif "day" in up_time:
            print(f"System uptime: {up_time}")
        else:
            print(f"System uptime: {up_time}")
    
    else:
        print("Unsupported OS.")

def print_most_cpu_usage():

    for p in psutil.process_iter():
        try:
            p.cpu_percent(None)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    time.sleep(1)

    util = list(psutil.process_iter(['pid', 'name', 'cpu_percent']))
    new_util = []
    for p in util:
        try:

            if p.info['cpu_percent'] is not None:
                new_util.append(p)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    top_util = sorted(new_util, key=lambda p: p.info['cpu_percent'], reverse=True) [:5]
    for p in top_util:
        print(f"CPU used by: {p.info['name']} \n Using: {p.info['cpu_percent']}")

def ram_usage():
    ram_usage = psutil.virtual_memory().percent

    if(ram_usage >= 90):
        print(Fore.RED +f"Warning high ram usage {ram_usage}")
    else:
        print(Fore.GREEN + f"RAM Usage: {ram_usage}")

def cpu_usage():
    cpu_usage = psutil.cpu_percent(1)
    if(cpu_usage >= 85):
        print(Fore.RED + f"Warning high cpu usage {cpu_usage}")
    else:
        print(Fore.GREEN + f"CPU usage: {cpu_usage}")

def disk_usage():
    if platform.system() == "Windows":
        windows_disk_usage= psutil.disk_usage("C://")
        if disk_usage > 80:
            print(Fore.RED + f"Warning: High disk usage {disk_usage}")
        elif disk_usage > 60:
            print(Fore.YELLOW + f"Disk usage moderate: {disk_usage}")
        else:
            print(Fore.GREEN + f"Disk usage: {disk_usage}")

    disk_usage = psutil.disk_usage('/').percent
    if disk_usage > 80:
        print(Fore.RED + f"Warning: High disk usage {disk_usage}")
    elif disk_usage > 60:
        print(Fore.YELLOW + f"Disk usage moderate: {disk_usage}")
    else:
        print(Fore.GREEN + f"Disk usage: {disk_usage}")

def core_usage():
    if platform.system() == "Windows":
        print("Load average not supported on Windows.")
        return
    
    if hasattr(psutil, "getloadavg"):

        load1, load5, load15 = psutil.getloadavg()
        core_count = os.cpu_count()
        if load1 > core_count:
            print(Fore.RED + f"Warning: High system load - Load(1min): {load1:.2f} > CPU Cores: {core_count}")
        elif load1 > core_count * 0.7:
            print(Fore.YELLOW + f"Load moderate: {load1:.2f} (1 min avg)")
        else:
            print(Fore.GREEN + f"Load average (1, 5, 15 min): {load1:.2f}, {load5:.2f}, {load15:.2f}")
    else:
        print("Load average not supported on this OS.")   

def gpu_usage_windows_nvidia():

    gpus= GPUtil.getGPUs()
    for gpu in gpus:
        usage = gpu.load * 100
        temp = gpu.temperature
        if usage > 90:
            print(Fore.RED + f"GPU {gpu.name} - Usage: {usage:.1f}% | Temp: {temp}°C")
        elif usage > 60:
            print(Fore.YELLOW + f"GPU {gpu.name} - Usage: {usage:.1f}% | Temp: {temp}°C")
        else:  
            print(Fore.GREEN + f"GPU {gpu.name} - Usage: {usage:.1f}% | Temp: {temp}°C")


features = {
    'cpu': cpu_usage,
    
    'ram': ram_usage,
    
    'disk': disk_usage,
    
    'uptime':  get_system_uptime,
    
    'avgl': core_usage,
    
    'mcpu':  print_most_cpu_usage,

    'gpu': gpu_usage_windows_nvidia
}


for feature, action in features.items():
    print(f"\n======{feature.upper()}======\n")
    action()

if platform.system() == "Windows":
    os.system("pause")
