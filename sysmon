#!/usr/bin/env python3
import argparse
import psutil 
import time

parser = argparse.ArgumentParser(description='System monitoring tool')

parser.add_argument('--cpu', action='store_true', help='Shows CPU usage')
parser.add_argument('--ram', action='store_true', help='Shows RAM usage')
parser.add_argument('--disk', action='store_true', help='Shows disk usage')
parser.add_argument('--btime', action='store_true', help='Shows returns system boot time')
parser.add_argument('--avgl', action='store_true', help='Shows average system load')
parser.add_argument('--mcpu',action='store_true', help='Shows most used cpu process (must be used as sudo)')

args = parser.parse_args()

def print_most_cpu_usage():
    
    for p in psutil.process_iter():
        p.cpu_percent(None)

    time.sleep(1)
    util = list(psutil.process_iter(['pid', 'name', 'cpu_percent']))
    new_util = []
    for p in util:
        if p.info['cpu_percent'] is not None:
            new_util.append(p)

    #util = [p for p in util if p.info['cpu_percent'] is not None]
    top_util = sorted(new_util, key=lambda p: p.info['cpu_percent'], reverse=True) [:10]
    for p in top_util:
        print(f"Most used CPU by: {p.info['name']} \n Using: {p.info['cpu_percent']}")

features = {
    'cpu': lambda: print(f"CPU usage: {psutil.cpu_percent(1)}%"),
    
    'ram': lambda: print(f"RAM usage: {psutil.virtual_memory().percent}"),
    
    'disk': lambda: print(f"Disk usage: {psutil.disk_usage('/').percent}"),
    
    'btime': lambda: print(f"Boot time: {psutil.boot_time()}"),
    
    'avgl': lambda: print(f"Load average (1, 5, 15 min): {psutil.getloadavg()}") ,#else print("Load average not supported on this OS."),
    
    'mcpu':  print_most_cpu_usage
}

for feature, action in features.items():
    if getattr(args, feature):
        action()
